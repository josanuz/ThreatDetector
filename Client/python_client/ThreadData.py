#!/usr/bin/env python
import ipaddr
import random

PROTOCOLS = ['HTTP', 'POP3', 'IMAP']
MESSAGE_TYPE = ['Mail','HTTP Request']

class ThreadData():

    def __init__(self):
        self._data = {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "title": "Event",
            "description": "Events Generated by the clients",
            "type": "object",
            "properties": {}
        }

    @property
    def data(self):
        self._data['properties']['originIp'] = self.originIp()
        self._data['properties']['destinationIP'] = self.destinationIp()
        self._data['properties']['headers'] = self.originIp()
        self._data['properties']['protocol'] = self.originIp()
        self._data['properties']['length'] = self.lenght()
        self._data['properties']['content'] = self.content()
        self._data['properties']['required'] = self.required()
        return self._data

    def random_protocol(self):
        return PROTOCOLS[random.randrange(0, len(PROTOCOLS))]

    def random_message_type(self):
        return MESSAGE_TYPE[random.randrange(0, len(MESSAGE_TYPE))]

    def random_ip_addr(self):
        return '%s.%s.%s.%s' % (
            random.randrange(0, 255),
            random.randrange(0, 255),
            random.randrange(0, 255),
            random.randrange(0, 255)
        )

    # Properties

    def originIp(self):
        return {
            "description": "Packet Origin IP",
            "type": "string"
        }


    def destinationIp(self):
        return {
            "description": "Packet Origin IP",
            "type": "string"
        }

    def header(self):
        return {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "headerName": {
                        "type": "string"
                    },
                    "headerValue": {
                        "type": "string"
                    }
                }
            }
        }


    def protocol(self):
        return {
            'description': self.random_protocol(),
            'type': 'string'
        }


    def lenght(self):
        return {
            "description": "Content Lenght",
            "type": "integer",
            "inclusiveMinimum": 0
        }


    def content(self):
        return {
            "description": "El contenido del mensaje",
            "type": "object",
            "properties": {
                "messageType": {
                    "description": self.random_message_type(),
                    "type": "string"
                },
                "content": {
                    "description": "The Message Content Check Wiky",
                    "type": "string"
                }
            }
        }

    def required(self):
        return ["orginIp", "headers", "destinationIP", "protocol", "lenght", "content"]
